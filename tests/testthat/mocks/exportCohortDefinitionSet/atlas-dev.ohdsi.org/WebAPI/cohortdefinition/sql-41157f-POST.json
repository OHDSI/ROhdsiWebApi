{
    "templateSql": "CREATE TABLE #Codesets (\r\n  codeset_id int NOT NULL,\r\n  concept_id bigint NOT NULL\r\n)\r\n;\r\n\r\nINSERT INTO #Codesets (codeset_id, concept_id)\nSELECT 0 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM\r\n( \r\n  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (201254)\r\n\r\n) I\r\n) C\r\n;\r\n\r\nwith primary_events (event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id) as\r\n(\r\n-- Begin Primary Events\r\nselect P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id\r\nFROM\r\n(\r\n  select E.person_id, E.start_date, E.end_date,\r\n         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC) ordinal,\r\n         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id\r\n  FROM \r\n  (\r\n  -- Begin Condition Era Criteria\r\nselect C.person_id, C.condition_era_id as event_id, C.condition_era_start_date as start_date,\r\n       C.condition_era_end_date as end_date, CAST(NULL as bigint) as visit_occurrence_id,\r\n       C.condition_era_start_date as sort_date\r\nfrom \r\n(\r\n  select ce.* \r\n  FROM @cdm_database_schema.CONDITION_ERA ce\r\nwhere ce.condition_concept_id in (SELECT concept_id from  #Codesets where codeset_id = 0)\r\n) C\r\n\r\n\r\n-- End Condition Era Criteria\r\n\r\n  ) E\r\n\tJOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date\r\n  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE\r\n) P\r\nWHERE P.ordinal = 1\r\n-- End Primary Events\r\n\r\n)\r\nSELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id\r\nINTO #qualified_events\r\nFROM \r\n(\r\n  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id\r\n  FROM primary_events pe\r\n  \r\n) QE\r\n\r\n;\r\n\r\n--- Inclusion Rule Inserts\r\n\r\nselect 0 as inclusion_rule_id, person_id, event_id\r\nINTO #Inclusion_0\r\nFROM \r\n(\r\n  select pe.person_id, pe.event_id\r\n  FROM #qualified_events pe\r\n  \nJOIN (\n-- Begin Criteria Group\r\nselect 0 as index_id, person_id, event_id\r\nFROM\r\n(\r\n  select E.person_id, E.event_id \r\n  FROM #qualified_events E\r\n  INNER JOIN\r\n  (\r\n    -- Begin Demographic Criteria\r\nSELECT 0 as index_id, e.person_id, e.event_id\r\nFROM #qualified_events E\r\nJOIN @cdm_database_schema.PERSON P ON P.PERSON_ID = E.PERSON_ID\r\nWHERE YEAR(E.start_date) - P.year_of_birth > 12\r\nGROUP BY e.person_id, e.event_id\r\n-- End Demographic Criteria\r\n\r\n  ) CQ on E.person_id = CQ.person_id and E.event_id = CQ.event_id\r\n  GROUP BY E.person_id, E.event_id\r\n  HAVING COUNT(index_id) = 1\r\n) G\r\n-- End Criteria Group\r\n) AC on AC.person_id = pe.person_id AND AC.event_id = pe.event_id\r\n) Results\r\n;\r\n\nSELECT inclusion_rule_id, person_id, event_id\nINTO #inclusion_events\nFROM (select inclusion_rule_id, person_id, event_id from #Inclusion_0) I;\nTRUNCATE TABLE #Inclusion_0;\nDROP TABLE #Inclusion_0;\n\r\n\r\nwith cteIncludedEvents(event_id, person_id, start_date, end_date, op_start_date, op_end_date, ordinal) as\r\n(\r\n  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal\r\n  from\r\n  (\r\n    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask\r\n    from #qualified_events Q\r\n    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id\r\n    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date\r\n  ) MG -- matching groups\r\n\r\n  -- the matching group with all bits set ( POWER(2,# of inclusion rules) - 1 = inclusion_rule_mask\r\n  WHERE (MG.inclusion_rule_mask = POWER(cast(2 as bigint),1)-1)\r\n\r\n)\r\nselect event_id, person_id, start_date, end_date, op_start_date, op_end_date\r\ninto #included_events\r\nFROM cteIncludedEvents Results\r\nWHERE Results.ordinal = 1\r\n;\r\n\r\n\r\n\r\n-- generate cohort periods into #final_cohort\r\nwith cohort_ends (event_id, person_id, end_date) as\r\n(\r\n\t-- cohort exit dates\r\n  -- By default, cohort exit at the event's op end date\nselect event_id, person_id, op_end_date as end_date from #included_events\r\n),\r\nfirst_ends (person_id, start_date, end_date) as\r\n(\r\n\tselect F.person_id, F.start_date, F.end_date\r\n\tFROM (\r\n\t  select I.event_id, I.person_id, I.start_date, E.end_date, row_number() over (partition by I.person_id, I.event_id order by E.end_date) as ordinal \r\n\t  from #included_events I\r\n\t  join cohort_ends E on I.event_id = E.event_id and I.person_id = E.person_id and E.end_date >= I.start_date\r\n\t) F\r\n\tWHERE F.ordinal = 1\r\n)\r\nselect person_id, start_date, end_date\r\nINTO #cohort_rows\r\nfrom first_ends;\r\n\r\nwith cteEndDates (person_id, end_date) AS -- the magic\r\n(\t\r\n\tSELECT\r\n\t\tperson_id\r\n\t\t, DATEADD(day,-1 * 0, event_date)  as end_date\r\n\tFROM\r\n\t(\r\n\t\tSELECT\r\n\t\t\tperson_id\r\n\t\t\t, event_date\r\n\t\t\t, event_type\r\n\t\t\t, MAX(start_ordinal) OVER (PARTITION BY person_id ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS start_ordinal \r\n\t\t\t, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY event_date, event_type) AS overall_ord\r\n\t\tFROM\r\n\t\t(\r\n\t\t\tSELECT\r\n\t\t\t\tperson_id\r\n\t\t\t\t, start_date AS event_date\r\n\t\t\t\t, -1 AS event_type\r\n\t\t\t\t, ROW_NUMBER() OVER (PARTITION BY person_id ORDER BY start_date) AS start_ordinal\r\n\t\t\tFROM #cohort_rows\r\n\t\t\r\n\t\t\tUNION ALL\r\n\t\t\r\n\r\n\t\t\tSELECT\r\n\t\t\t\tperson_id\r\n\t\t\t\t, DATEADD(day,0,end_date) as end_date\r\n\t\t\t\t, 1 AS event_type\r\n\t\t\t\t, NULL\r\n\t\t\tFROM #cohort_rows\r\n\t\t) RAWDATA\r\n\t) e\r\n\tWHERE (2 * e.start_ordinal) - e.overall_ord = 0\r\n),\r\ncteEnds (person_id, start_date, end_date) AS\r\n(\r\n\tSELECT\r\n\t\t c.person_id\r\n\t\t, c.start_date\r\n\t\t, MIN(e.end_date) AS end_date\r\n\tFROM #cohort_rows c\r\n\tJOIN cteEndDates e ON c.person_id = e.person_id AND e.end_date >= c.start_date\r\n\tGROUP BY c.person_id, c.start_date\r\n)\r\nselect person_id, min(start_date) as start_date, end_date\r\ninto #final_cohort\r\nfrom cteEnds\r\ngroup by person_id, end_date\r\n;\r\n\r\nDELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;\r\nINSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)\r\nselect @target_cohort_id as cohort_definition_id, person_id, start_date, end_date \nFROM #final_cohort CO\r\n;\r\n\r\n\r\n-- BEGIN: Censored Stats\r\n\r\ndelete from @results_database_schema.cohort_censor_stats where cohort_definition_id = @target_cohort_id;\r\n\r\n-- END: Censored Stats\r\n\r\n\r\n\r\n-- Create a temp table of inclusion rule rows for joining in the inclusion rule impact analysis\r\n\r\nselect cast(rule_sequence as int) as rule_sequence\r\ninto #inclusion_rules\r\nfrom (\r\n  SELECT CAST(0 as int) as rule_sequence\r\n) IR;\r\n\r\n\r\n-- Find the event that is the 'best match' per person.  \r\n-- the 'best match' is defined as the event that satisfies the most inclusion rules.\r\n-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.\r\n\r\nselect q.person_id, q.event_id\r\ninto #best_events\r\nfrom #qualified_events Q\r\njoin (\r\n\tSELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value\r\n\tFROM (\r\n\t\tSELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date\r\n\t\tFROM #qualified_events Q\r\n\t\tLEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id\r\n\t\tGROUP BY Q.person_id, Q.event_id, Q.start_date\r\n\t) R\r\n) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id\r\nWHERE ranked.rank_value = 1\r\n;\r\n\r\n-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)\r\n-- 0: all events\r\n-- 1: best event\r\n\r\n\r\n-- BEGIN: Inclusion Impact Analysis - event\r\n-- calculte matching group counts\r\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id\r\nfrom\r\n(\r\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\r\n  from #qualified_events Q\r\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\r\n  GROUP BY Q.person_id, Q.event_id\r\n) MG -- matching groups\r\ngroup by inclusion_rule_mask\r\n;\r\n\r\n-- calculate gain counts \r\ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id\r\nfrom #inclusion_rules ir\r\nleft join\r\n(\r\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\r\n  from #qualified_events Q\r\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\r\n  group by i.inclusion_rule_id\r\n) T on ir.rule_sequence = T.inclusion_rule_id\r\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\nCROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal\r\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\r\n;\r\n\r\n-- calculate totals\r\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;\r\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id\r\nFROM\r\n(select count_big(event_id) as total from #qualified_events) PC,\r\n(select sum(sr.person_count) as total\r\n  from @results_database_schema.cohort_inclusion_result sr\r\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\n  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\r\n) FC\r\n;\r\n\r\n-- END: Inclusion Impact Analysis - event\r\n\r\n-- BEGIN: Inclusion Impact Analysis - person\r\n-- calculte matching group counts\r\ndelete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id\r\nfrom\r\n(\r\n  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask\r\n  from #best_events Q\r\n  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id\r\n  GROUP BY Q.person_id, Q.event_id\r\n) MG -- matching groups\r\ngroup by inclusion_rule_mask\r\n;\r\n\r\n-- calculate gain counts \r\ndelete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id\r\nfrom #inclusion_rules ir\r\nleft join\r\n(\r\n  select i.inclusion_rule_id, count_big(i.event_id) as person_count\r\n  from #best_events Q\r\n  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id\r\n  group by i.inclusion_rule_id\r\n) T on ir.rule_sequence = T.inclusion_rule_id\r\nCROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\nCROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal\r\nLEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'\r\n;\r\n\r\n-- calculate totals\r\ndelete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;\r\ninsert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)\r\nselect @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id\r\nFROM\r\n(select count_big(event_id) as total from #best_events) PC,\r\n(select sum(sr.person_count) as total\r\n  from @results_database_schema.cohort_inclusion_result sr\r\n  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal\r\n  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1\r\n) FC\r\n;\r\n\r\n-- END: Inclusion Impact Analysis - person\r\n\r\nTRUNCATE TABLE #best_events;\r\nDROP TABLE #best_events;\r\n\r\nTRUNCATE TABLE #inclusion_rules;\r\nDROP TABLE #inclusion_rules;\r\n\r\n\r\n\r\n\r\nTRUNCATE TABLE #cohort_rows;\r\nDROP TABLE #cohort_rows;\r\n\r\nTRUNCATE TABLE #final_cohort;\r\nDROP TABLE #final_cohort;\r\n\r\nTRUNCATE TABLE #inclusion_events;\r\nDROP TABLE #inclusion_events;\r\n\r\nTRUNCATE TABLE #qualified_events;\r\nDROP TABLE #qualified_events;\r\n\r\nTRUNCATE TABLE #included_events;\r\nDROP TABLE #included_events;\r\n\r\nTRUNCATE TABLE #Codesets;\r\nDROP TABLE #Codesets;\r\n"
}
